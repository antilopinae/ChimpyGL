#pragma once#include <functional>#include <iostream>#include <map>#include <memory>#include <string>#include <utility>#include "component.hpp"#include "display_directory_cmp.hpp"#include "image_cmp.hpp"#include "text_cmp.hpp"namespace Core{class ComponentManager{private:  std::map<std::string, std::shared_ptr<Component>> comps_;  std::vector<ComponentManager> managers_;public:  ComponentManager() : comps_(), managers_() {}public:  void render(float display_w, float display_h, float padding_top = 0, float padding_left = 0)  {    setStyle();    for (auto& [name, window] : comps_)    {      float window_w = display_w - padding_left * display_w;      float window_h = display_h - padding_top * display_h;      window->render(window_w, window_h);    }  }public:  void push_back(ComponentManager&& manager)  {    managers_.push_back(std::forward<ComponentManager>(manager));  }public:  ComponentManager& operator[](size_t i)  {    return managers_[i];  }private:  template <typename Component>  void addComponent(std::shared_ptr<Component>&& cmp)  {    comps_.insert_or_assign(cmp->render_name_, std::move(cmp));  }private:  void setStyle()  {    // static ImGuiStyle& style = ImGui::GetStyle();    // style.WindowRounding = 5.0f;    // style.Colors[ImGuiCol_WindowBg] = ImVec4(0.824f, 0.706f, 0.549f, 1.0f);    //    // ImVec4 black = ImVec4(0.0f, 0.0f, 0.0f, 1.0f);    // ImVec4 light_brown = ImVec4(205.0f / 255.0f, 133.0f / 255.0f, 63.0f / 255.0f, 1.0f);    //    // style.Colors[ImGuiCol_Tab] = black;    // style.Colors[ImGuiCol_TabHovered] = light_brown;    // style.Colors[ImGuiCol_TabActive] = light_brown;    // style.Colors[ImGuiCol_TabUnfocused] = black;    // style.Colors[ImGuiCol_TabUnfocusedActive] = light_brown;    //    // style.Colors[ImGuiCol_Button] = black;    //    // style.Colors[ImGuiCol_TitleBg] = black;    // style.Colors[ImGuiCol_Border] = black;    // style.Colors[ImGuiCol_ScrollbarGrab] = black;    // style.Colors[ImGuiCol_TitleBgCollapsed] = black;    // style.Colors[ImGuiCol_HeaderActive] = black;    //    // style.Colors[ImGuiCol_ButtonActive] = black;    // style.Colors[ImGuiCol_ButtonHovered] = light_brown;    //    // style.Colors[ImGuiCol_SliderGrabActive] = light_brown;    // style.Colors[ImGuiCol_TitleBgActive] = black;  }public:  template <typename... Component>  void addCmps(std::shared_ptr<Component>&&... cmps)  {    (addComponent(std::move(cmps)), ...);  }};}  // namespace Core